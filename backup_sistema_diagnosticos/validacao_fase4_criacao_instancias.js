/**
 * FASE 4 - VALIDA√á√ÉO FINAL: TESTE DE CRIA√á√ÉO DE INST√ÇNCIAS
 * 
 * Este script testa se o novo sistema n√£o interfere na cria√ß√£o de novas inst√¢ncias.
 * Verifica todo o fluxo de cria√ß√£o sem afetar inst√¢ncias existentes.
 */

const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

class ValidadorCriacaoInstancias {
    constructor() {
        this.baseURL = 'http://localhost:3000';
        this.testInstanceId = null;
        this.resultados = {
            testes: [],
            sucesso: 0,
            falhas: 0,
            tempo_total: 0
        };
    }

    log(message, tipo = 'INFO') {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] [${tipo}] ${message}`);
        
        this.resultados.testes.push({
            timestamp,
            tipo,
            message,
            success: tipo !== 'ERROR'
        });
    }

    async testePreRequisitos() {
        this.log('üîç Verificando pr√©-requisitos do sistema...');
        
        try {
            // Verificar se server est√° rodando
            const response = await axios.get(`${this.baseURL}/api/instances`);
            this.log('‚úÖ Servidor principal respondendo', 'SUCCESS');
            
            // Verificar se APIs de sa√∫de est√£o ativas
            const healthSummary = await axios.get(`${this.baseURL}/api/instances/health-summary`);
            this.log('‚úÖ APIs de sa√∫de funcionando', 'SUCCESS');
            
            return true;
        } catch (error) {
            this.log(`‚ùå Falha nos pr√©-requisitos: ${error.message}`, 'ERROR');
            return false;
        }
    }

    async testeCriacaoInstanciaCompleta() {
        this.log('üèóÔ∏è Testando cria√ß√£o completa de inst√¢ncia...');
        
        const instanceData = {
            project_name: `teste-fase4-${Date.now()}`,
            db_password: 'TestPass123!',
            jwt_secret: 'super-secret-jwt-test-key-32-chars-min',
            anon_key: 'teste-anon-key',
            service_role_key: 'teste-service-role-key',
            ports: {
                kong: 8001,
                studio: 3001,
                db: 5433
            }
        };

        try {
            const startTime = Date.now();
            
            // Criar inst√¢ncia
            const createResponse = await axios.post(
                `${this.baseURL}/api/instances`, 
                instanceData
            );
            
            if (createResponse.data.success) {
                this.testInstanceId = createResponse.data.instance.id;
                const createTime = Date.now() - startTime;
                
                this.log(`‚úÖ Inst√¢ncia criada com sucesso em ${createTime}ms`, 'SUCCESS');
                this.log(`   ID: ${this.testInstanceId}`, 'INFO');
                
                return true;
            } else {
                this.log('‚ùå Falha na cria√ß√£o da inst√¢ncia', 'ERROR');
                return false;
            }
            
        } catch (error) {
            this.log(`‚ùå Erro na cria√ß√£o: ${error.message}`, 'ERROR');
            return false;
        }
    }

    async testeInicializacaoServicos() {
        if (!this.testInstanceId) {
            this.log('‚ùå Sem inst√¢ncia para testar inicializa√ß√£o', 'ERROR');
            return false;
        }

        this.log('üöÄ Testando inicializa√ß√£o dos servi√ßos...');
        
        let tentativas = 0;
        const maxTentativas = 12; // 2 minutos m√°ximo
        
        while (tentativas < maxTentativas) {
            try {
                const healthResponse = await axios.get(
                    `${this.baseURL}/api/instances/${this.testInstanceId}/health`
                );
                
                if (healthResponse.data.success) {
                    const health = healthResponse.data.health;
                    const score = health.health.score;
                    
                    this.log(`üìä Score de sa√∫de: ${score}% (tentativa ${tentativas + 1})`, 'INFO');
                    
                    if (score >= 80) {
                        this.log('‚úÖ Servi√ßos inicializados com sucesso', 'SUCCESS');
                        this.log(`   Containers: ${health.health.healthy}/${health.health.total}`, 'INFO');
                        return true;
                    }
                }
                
                tentativas++;
                await this.sleep(10000); // Aguardar 10 segundos
                
            } catch (error) {
                this.log(`‚ö†Ô∏è Erro na verifica√ß√£o: ${error.message}`, 'WARN');
                tentativas++;
                await this.sleep(10000);
            }
        }
        
        this.log('‚ùå Timeout na inicializa√ß√£o dos servi√ßos', 'ERROR');
        return false;
    }

    async testeNaoInterferencia() {
        this.log('üîí Testando n√£o interfer√™ncia com inst√¢ncias existentes...');
        
        try {
            // Listar inst√¢ncias existentes antes
            const beforeResponse = await axios.get(`${this.baseURL}/api/instances`);
            const instancesAntes = Object.keys(beforeResponse.data.instances || {});
            
            // Aguardar alguns segundos
            await this.sleep(5000);
            
            // Listar inst√¢ncias depois
            const afterResponse = await axios.get(`${this.baseURL}/api/instances`);
            const instancesDepois = Object.keys(afterResponse.data.instances || {});
            
            // Verificar se outras inst√¢ncias n√£o foram afetadas
            const instanciasExistentes = instancesAntes.filter(id => id !== this.testInstanceId);
            let todasOk = true;
            
            for (const instanceId of instanciasExistentes) {
                try {
                    const healthResponse = await axios.get(
                        `${this.baseURL}/api/instances/${instanceId}/health`
                    );
                    
                    if (healthResponse.data.success) {
                        const score = healthResponse.data.health.health.score;
                        if (score >= 70) {
                            this.log(`   ‚úÖ Inst√¢ncia ${instanceId}: ${score}%`, 'SUCCESS');
                        } else {
                            this.log(`   ‚ö†Ô∏è Inst√¢ncia ${instanceId}: ${score}% (degradada)`, 'WARN');
                        }
                    }
                } catch (error) {
                    this.log(`   ‚ùå Inst√¢ncia ${instanceId}: erro`, 'ERROR');
                    todasOk = false;
                }
            }
            
            if (todasOk) {
                this.log('‚úÖ N√£o houve interfer√™ncia com inst√¢ncias existentes', 'SUCCESS');
                return true;
            } else {
                this.log('‚ö†Ô∏è Poss√≠vel interfer√™ncia detectada', 'WARN');
                return false;
            }
            
        } catch (error) {
            this.log(`‚ùå Erro no teste de n√£o interfer√™ncia: ${error.message}`, 'ERROR');
            return false;
        }
    }

    async testeLimpeza() {
        if (!this.testInstanceId) {
            this.log('‚ö†Ô∏è Nenhuma inst√¢ncia de teste para limpar', 'WARN');
            return true;
        }

        this.log('üßπ Limpando inst√¢ncia de teste...');
        
        try {
            const deleteResponse = await axios.delete(
                `${this.baseURL}/api/instances/${this.testInstanceId}`
            );
            
            if (deleteResponse.data.success) {
                this.log('‚úÖ Inst√¢ncia de teste removida com sucesso', 'SUCCESS');
                return true;
            } else {
                this.log('‚ùå Falha na remo√ß√£o da inst√¢ncia de teste', 'ERROR');
                return false;
            }
            
        } catch (error) {
            this.log(`‚ùå Erro na limpeza: ${error.message}`, 'ERROR');
            return false;
        }
    }

    async executarTodosOsTestes() {
        const inicioTeste = Date.now();
        this.log('üéØ INICIANDO VALIDA√á√ÉO DE CRIA√á√ÉO DE INST√ÇNCIAS - FASE 4');
        this.log('='.repeat(60));

        const testes = [
            { nome: 'Pr√©-requisitos', funcao: () => this.testePreRequisitos() },
            { nome: 'Cria√ß√£o de Inst√¢ncia', funcao: () => this.testeCriacaoInstanciaCompleta() },
            { nome: 'Inicializa√ß√£o de Servi√ßos', funcao: () => this.testeInicializacaoServicos() },
            { nome: 'N√£o Interfer√™ncia', funcao: () => this.testeNaoInterferencia() },
            { nome: 'Limpeza', funcao: () => this.testeLimpeza() }
        ];

        for (const teste of testes) {
            this.log(`\nüìã Executando: ${teste.nome}...`);
            const resultado = await teste.funcao();
            
            if (resultado) {
                this.resultados.sucesso++;
                this.log(`‚úÖ ${teste.nome}: PASSOU`, 'SUCCESS');
            } else {
                this.resultados.falhas++;
                this.log(`‚ùå ${teste.nome}: FALHOU`, 'ERROR');
            }
        }

        this.resultados.tempo_total = Date.now() - inicioTeste;
        this.gerarRelatorioFinal();
    }

    gerarRelatorioFinal() {
        this.log('\n' + '='.repeat(60));
        this.log('üìä RELAT√ìRIO FINAL - VALIDA√á√ÉO DE CRIA√á√ÉO DE INST√ÇNCIAS');
        this.log('='.repeat(60));
        
        this.log(`‚úÖ Testes bem-sucedidos: ${this.resultados.sucesso}`);
        this.log(`‚ùå Testes com falha: ${this.resultados.falhas}`);
        this.log(`‚è±Ô∏è Tempo total: ${Math.round(this.resultados.tempo_total / 1000)}s`);
        
        const percentualSucesso = Math.round(
            (this.resultados.sucesso / (this.resultados.sucesso + this.resultados.falhas)) * 100
        );
        
        this.log(`üìà Taxa de sucesso: ${percentualSucesso}%`);
        
        if (percentualSucesso >= 80) {
            this.log('üéâ VALIDA√á√ÉO APROVADA - Sistema n√£o interfere na cria√ß√£o', 'SUCCESS');
        } else {
            this.log('‚ö†Ô∏è VALIDA√á√ÉO REPROVADA - Revisar interfer√™ncias', 'ERROR');
        }
        
        return this.resultados;
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// Executar valida√ß√£o se chamado diretamente
if (require.main === module) {
    const validador = new ValidadorCriacaoInstancias();
    validador.executarTodosOsTestes()
        .then(resultados => {
            process.exit(resultados.falhas > 0 ? 1 : 0);
        })
        .catch(error => {
            console.error('Erro fatal na valida√ß√£o:', error);
            process.exit(1);
        });
}

module.exports = ValidadorCriacaoInstancias;